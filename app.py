import os
import json
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

app = Flask(__name__)

# Pega as credenciais das vari√°veis de ambiente
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")

# --- O C√âREBRO DA IA EST√Å AQUI ---
def processar_mensagem_ia(mensagem_usuario):
    """
    Esta √© a fun√ß√£o de IA mais simples do mundo.
    No futuro, voc√™ vai substituir isso por uma chamada para o Google Gemini,
    ChatGPT ou outra IA.
    """
    mensagem_usuario = mensagem_usuario.lower()
    
    if "ol√°" in mensagem_usuario or "oi" in mensagem_usuario:
        return "Ol√°! üëã Sou um agente de IA. Como posso te ajudar hoje?"
    elif "hor√°rio" in mensagem_usuario or "funciona" in mensagem_usuario:
        return "Nosso hor√°rio de funcionamento √© de segunda a sexta, das 9h √†s 18h."
    elif "obrigado" in mensagem_usuario or "obrigada" in mensagem_usuario:
        return "De nada! Se precisar de mais alguma coisa, √© s√≥ chamar. üòä"
    else:
        return "Desculpe, n√£o entendi. Poderia reformular sua pergunta?"

# Rota para a Meta verificar seu webhook
@app.route('/webhook', methods=['GET'])
def verify_webhook():
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.challenge"):
        if request.args.get("hub.verify_token") == VERIFY_TOKEN:
            return request.args.get("hub.challenge"), 200
    return "Token de verifica√ß√£o inv√°lido", 403

# Rota para receber mensagens do WhatsApp
@app.route('/webhook', methods=['POST'])
def receive_message():
    data = request.get_json()
    print(json.dumps(data, indent=2)) # √ötil para depura√ß√£o

    if data.get("object") == "whatsapp_business_account":
        try:
            message = data['entry'][0]['changes'][0]['value']['messages'][0]
            from_number = message['from']
            user_message_body = message['text']['body']

            # Envia a mensagem do usu√°rio para o nosso "c√©rebro" de IA
            resposta_ia = processar_mensagem_ia(user_message_body)

            # Envia a resposta de volta para o usu√°rio
            send_whatsapp_message(from_number, resposta_ia)

        except (KeyError, IndexError):
            # Caso a notifica√ß√£o n√£o seja uma mensagem de usu√°rio
            pass

    return jsonify(status="ok"), 200

def send_whatsapp_message(to_number, text_message):
    """Fun√ß√£o para enviar uma mensagem de texto via API do WhatsApp."""
    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json",
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to_number,
        "text": {"body": text_message},
    }
    response = requests.post(url, headers=headers, json=payload)
    print(f"Status do envio: {response.status_code}, Resposta: {response.json()}")

if __name__ == '__main__':
    app.run(port=5000, debug=True)